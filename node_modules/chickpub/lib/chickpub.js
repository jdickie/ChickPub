var request = require('request'),
    pubconnect = require('./pubconnect.js'),
    async = require('async'),
    _ = require('underscore');

var ChickPub = module.exports = function() {
    var self = this;
    this.dbUtil = new pubconnect(function(err) {
        if (err) {
            throw err;
        }
    });
    this.SEND_BATCH_SIZE = 40;
};

ChickPub.prototype.sendMessageToSubscriber = function(message, subscriberUrl, callDoneCallback) {
    try {
        request.post({
            url : subscriberUrl,
            json : true,
            body : message
        },
        function(err) {
            if (err) {
                throw err;
            }
            callDoneCallback(null);
        });
    } catch (e) {
        callDoneCallback(e, null);
    }
};

ChickPub.prototype.sendMessageToTopic = function(message, topic, sendMessageDoneCallback) {
    var self = this,
        success = 0,
        failed = 0;
try {
    self.dbUtil.getAllUidsForTopic(topic, function(err, subscribers) {
        if (err) {
            throw err;
        }
        if (_.isEmpty(subscribers) || !_.isArray(subscribers)) {
            throw new Error("No subscribers found for topic or subscribers is non-array");
        }
        async.eachLimit(subscribers, self.SEND_BATCH_SIZE,
            function (subscriber, iteratorCallback) {
                self.sendMessageToSubscriber(message, subscriber.url, function(err) {
                    if (err) {
                        failed++;
                    } else {
                        success++;
                    }
                    iteratorCallback(null);
                });
            },
            function(err) {
                if (err) {
                    throw (err);
                }
                sendMessageDoneCallback(null, {
                    success : success,
                    failed : failed
                });
            });
    });
} catch (e) {
    sendMessageDoneCallback(e, {
        success : success,
        failed : failed
    });
}

};

ChickPub.prototype.getAllSubscribers = function(topic, gotAllSubscribersCallback) {
    var self = this,
        subscribers = [];

    try {
        self.dbUtil.getAllUidsForTopic(topic, function(err, foundSubscriptions) {
            subscribers = foundSubscriptions;
            gotAllSubscribersCallback(null, {
                subscribers : subscribers
            });
        });
    } catch(err) {
        gotAllSubscribersCallback(err, {
            subscribers : subscribers
        })
    }
};