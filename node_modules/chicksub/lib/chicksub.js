/**
 ChickSub Framework
 **/
var config = require('config'),
    log = require('morgan'),
    db = require('rethinkdb'),
    _ = require('underscore'),
    subConnect = require('./subconnect.js'),
    morgan = require('morgan');

var ChickSub = module.exports = function () {
    this.cryptoKey = config.security.subscribeKey;
    this.dbUtil = new subConnect(function(err) {
        if(err) {
            throw err;
        }
    });
};

// Private functions go here
/**
 * pass in any address reference and will
 * return UID hash
 *
 * @param uri
 */
var generateUID = function(uri, key) {
    if (_.isEmpty(uri)) {
        throw new Error("url passed in expected to be valid URI " + url + " found");
    }
    var hashSeed = uri + key;
    return new Buffer(hashSeed).toString('base64');
};

// End private functions

ChickSub.prototype.subscribe = function (uri, topic, callback) {
    var self = this,
        err;
    try {
        if(_.isEmpty(uri) || _.isEmpty(topic)) {
            err = new Error("Uri or topic not passed into subscribe");
            throw err;
        }
        var uid = generateUID(uri, self.cryptoKey);

        // Create model
        self.dbUtil.storeInDb({
            url : uri,
            uid : uid,
            topic : topic
        }, function(err, model) {
           if (err) {
               console.log('chicksub subscribe', err);
               throw err;
           }
           callback(null, model);
        });
    } catch (e) {
        err = e;
        callback(err, null);
    }

};

ChickSub.prototype.unsubscribe = function (uid, callback) {
    var self = this;
    try {
        self.dbUtil.getFromDbByUid(uid, function(err, model) {
           if (err) {
               throw err;
           }
           if (_.isEmpty(model)) {
               throw new Error("No uid found in database for " + uid);
           }
           self.dbUtil.removeTopicSubscription(uid, callback);
        });
    } catch (e) {
        err = e;
        callback(err, null);
    }
};

ChickSub.prototype.getSubscriber = function (uid, callback) {
    var self = this;
    self.dbUtil.getFromDbByUid(uid, callback);
};

ChickSub.prototype.updateSubscription = function (uid, props, callback) {
    var self = this,
        err;
    try {
        self.dbUtil.getFromDbByUid(uid, function (err, model) {
            if (err) {
                throw err;
            }

            var updated = _.extend(model, props);
            self.dbUtil.storeInDb(updated, function(err, model) {
                callback(err, model);
            });
        });

    } catch (e) {
        err = e;
        callback(err, null);
    }
};