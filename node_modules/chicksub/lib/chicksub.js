/**
 ChickSub Framework
 **/
var config = require('config'),
    log = require('morgan'),
    db = require('rethinkdb'),
    _ = require('underscore');

var ChickSub = module.exports = function () {
    this.cryptoKey = config.security.subscribeKey;
};

// Private functions go here
/**
 * pass in any address reference and will
 * return UID hash
 *
 * @param uri
 */
var generateUID = function(uri, key) {
    if (_.isEmpty(uri)) {
        throw new Error("url passed in expected to be valid URI " + url + " found");
    }
    var hashSeed = uri + key;
    return new Buffer(hashSeed).toString('base64');
};

// End private functions

ChickSub.prototype.subscribe = function (uri, callback) {
    var self = this,
        err;
    try {
        var uid = generateUID(uri, self.cryptoKey),
            model;

        // Create model
        model = {
            "uid" : uid,
            "url" : uri
        };

        callback(err, model);
    } catch (e) {
        err = e;
        callback(err, null);
    }

};

ChickSub.prototype.unsubscribe = function (uid, callback) {
    var err,
        self = this;
    try {
        self.removeFromDb(uid, callback);
    } catch (e) {
        err = e;
        callback(err, null);
    }
};

ChickSub.prototype.getSubscriber = function (uid, callback) {
    var subscriber = {
        "uid" : 123,
        "url" : ''
    },
        err;
    callback(err, subscriber);
};

ChickSub.prototype.updateSubscription = function (uid, props, callback) {
    var self = this,
        err,
        updated = _.extend({}, props);
    try {
        self.storeInDb(updated, function(err, model) {
            callback(err, model);
        });
    } catch (e) {
        err = e;
        callback(err, updated);
    }
};

ChickSub.prototype.storeInDb = function (model, callback) {
    var stored = model,
        err;

    callback(err, model);
};

ChickSub.prototype.removeFromDb = function (uid, callback) {
    var removed = { 'uid' : uid },
        err;

    callback(err, removed);
};