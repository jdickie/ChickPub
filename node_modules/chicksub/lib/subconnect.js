/**
 Connects with rethinkdb - util class for chicksub
 **/
var r = require('rethinkdb'),
    config = require('config'),
    _ = require('underscore');

var DB_NAME = config.environment.dbName,
    SUBSCRIBER_TABLE_NAME = 'subscriptions';

var SubConnect = function(callback) {
    this.dbHost = config.environment.host;
    this.dbPort = config.environment.dbPort;
    this.connection = null;
    this.establishConnection(callback);
};

SubConnect.prototype.establishConnection = function(connectionDoneCallback) {
    var self = this;
    r.connect({host : self.dbHost, port : self.dbPort}, function(err, conn) {
        self.connection = conn;
        r.dbList()
            .run(self.connection, function(err, results) {
                if (err) {
                    connectionDoneCallback(err);
                }
                if (_.indexOf(results, DB_NAME) >= 0) {
                    connectionDoneCallback(null);
                } else {
                    self.setUpDatabase(connectionDoneCallback);
                }
            });
    });
};

SubConnect.prototype.setUpDatabase = function(connectionDoneCallback) {
    var self = this;
    r.dbCreate(DB_NAME).run(self.connection, function(err, results) {
        if (err) {
            self.setUpSchema(connectionDoneCallback);
        }
        if (results.dbs_created === 0) {
            connectionDoneCallback(new Error("no database created"));
        }
        self.setUpSchema(connectionDoneCallback);
    });
};

SubConnect.prototype.setUpSchema = function(connectionDoneCallback) {
    var self = this;
    try {
        if (!_.isEmpty(self.connection)) {
            r.db(DB_NAME).tableCreate(SUBSCRIBER_TABLE_NAME, {
                primaryKey : 'uid'
            })
                .run(self.connection, function (err, results) {
                    if(err) {
                        throw err;
                    }
                    connectionDoneCallback(results);
                });
        }
    } catch (err) {
        connectionDoneCallback(err);
    }
};

SubConnect.prototype.storeInDb = function(model, storeDoneCallback) {
    var self = this,
        err;

    try {
        if (_.isEmpty(self.connection)) {
            throw new Error("No database connection setup");
        }
        r.db(DB_NAME).table(SUBSCRIBER_TABLE_NAME).insert([
                model
            ], {conflict:'update'})
            .run(self.connection, function (err, result) {
                if (err) {
                    throw err;
                }
                if (result.errors === 0) {
                    storeDoneCallback(err, model);
                } else {
                    throw new Error(JSON.stringify(result.errors));
                }
            });
    }
    catch (e) {
        err = e;
        storeDoneCallback(err, null);
    }


};

SubConnect.prototype.getFromDbByUid = function(uid, gotModelCallback) {
    var self = this;
    try {
        if (_.isEmpty(self.connection)) {
            throw new Error("no connection made");
        }
        r.db(DB_NAME).table(SUBSCRIBER_TABLE_NAME).get(uid)
            .run(self.connection, function(err, result) {
                if (err) {
                    throw err;
                }
                if (_.isEmpty(result)) {
                    throw new Error("No Results found");
                }
                gotModelCallback(null, result);
            });

    } catch (err) {
        gotModelCallback(err);
    }
};

SubConnect.prototype.removeTopicSubscription = function(uid, removeDoneCallback) {
   var self = this;
    try {
        if (_.isEmpty(self.connection)) {
            throw new Error("no connection made");
        }
        r.db(DB_NAME).table(SUBSCRIBER_TABLE_NAME).delete(uid)
            .run(self.connection, removeDoneCallback);
    } catch (err) {
        removeDoneCallback(err);
    }
};

SubConnect.prototype.getAllUidsForTopic = function(topic, gotAllUidsCallback) {
    var self = this;
    try {
        if (_.isEmpty(self.connection)) {
            throw new Error("no connection made");
        }
        r.db(DB_NAME).table(SUBSCRIBER_TABLE_NAME).getAll(topic)
            .run(self.connection, function(err, results) {
                if (err) {
                    throw err;
                }
                gotAllUidsCallback(null, results);
            });
    } catch (err) {
        gotAllUidsCallback(err);
    }
};

module.exports = SubConnect;